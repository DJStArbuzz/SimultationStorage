import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;

/**
 * –ö–ª–∞—Å—Å –°–∫–ª–∞–¥ (Warehouse)
 *
 * –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–∏—Å—Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–π —Å–≤—è–∑—ã–≤–∞–µ—Ç –∫—É—Ä—å–µ—Ä–æ–≤, –∫–ª–∞–¥–æ–≤—â–∏–∫–æ–≤ –∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤.
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –∑–∞–ø–∞—Å–æ–≤, –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏—Å—Ç–∏–∫–æ–π.
 */
public class Warehouse {
    private final String id;                    // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞
    private final Coordinates coordinates;      // –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–∫–ª–∞–¥–∞
    private final Map<Product, Integer> stock;  // –¢–æ–≤–∞—Ä–Ω—ã–µ –∑–∞–ø–∞—Å—ã: —Ç–æ–≤–∞—Ä ‚Üí –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

    private final List<Producer> suppliers = new ArrayList<>();      // –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
    private final List<Warehouseman> storekeepers = new ArrayList<>(); // –†–∞–±–æ—Ç–∞—é—â–∏–µ –∫–ª–∞–¥–æ–≤—â–∏–∫–∏
    private final List<Courier> couriers = new ArrayList<>();        // –†–∞–±–æ—Ç–∞—é—â–∏–µ –∫—É—Ä—å–µ—Ä—ã
    private final Queue<Order> orders = new LinkedList<>();          // –û—á–µ—Ä–µ–¥—å –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–∫–ª–∞–¥–∞
     * @param stock –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä–Ω—ã–µ –∑–∞–ø–∞—Å—ã
     * @param coordinates –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
     */
    public Warehouse(Map<Product, Integer> stock, Coordinates coordinates) {
        this.id = IdGenerator.generateId(IdGenerator.ObjectType.WAREHOUSE);
        this.stock = stock;
        this.coordinates = coordinates;
    }

    // –ì–µ—Ç—Ç–µ—Ä—ã
    public String getId() {
        return id;
    }

    public Map<Product, Integer> getStock() {
        return stock;
    }

    public Coordinates getCoordinates() {
        return coordinates;
    }

    public Queue<Order> getOrders() {
        return orders;
    }

    // –ú–µ—Ç–æ–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
    public void addCourier(Courier courier) {
        couriers.add(courier);
    }

    public void addSupplier(Producer supplier) {
        suppliers.add(supplier);
    }

    public void addStorekeeper(Warehouseman storekeeper) {
        storekeepers.add(storekeeper);
    }

    /**
     * –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
     * @param order –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
     */
    public void addOrder(Order order) {
        orders.offer(order);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã –≤ –æ—á–µ—Ä–µ–¥–∏
     *
     * –ê–ª–≥–æ—Ä–∏—Ç–º:
     * 1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
     * 2. –ü—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ - –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫—É –∏ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ—Ç –∑–∞–∫–∞–∑
     * 3. –ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ - –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É
     * 4. –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥—å
     */
    public void completeOrders() {
        Queue<Order> pendingOrders = new LinkedList<>();
        List<Order> incompleteOrders = new ArrayList<>();

        while (!orders.isEmpty()) {
            Order order = orders.poll();
            boolean needSupply = false;
            boolean missingSupplier = false;

            for (Map.Entry<Product, Integer> entry : order.getOriginalProducts().entrySet()) {
                Product p = entry.getKey();
                int required = entry.getValue();
                int available = stock.getOrDefault(p, 0);

                if (available < required) {
                    int deficit = required - available;
                    if (!requestSupply(p, deficit + 10)) {
                        missingSupplier = true;
                    }
                    needSupply = true;
                }
            }

            if (missingSupplier) {
                System.out.println("üö´ –ó–∞–∫–∞–∑ " + order.getOrderId() +
                        " –Ω–µ–ø–æ–ª–Ω—ã–π: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤");
                pendingOrders.offer(order);
            } else if (needSupply) {
                System.out.println("‚è≥ –ó–∞–∫–∞–∑ " + order.getOrderId() +
                        " –æ—Ç–ª–æ–∂–µ–Ω: –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ—Å—Ç–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤");
                pendingOrders.offer(order);
            } else {
                if (order.removeUnavailableProducts(this)) {
                    processOrder(order);
                } else {
                    System.out.println("–ó–∞–∫–∞–∑ " + order.getOrderId() +
                            " –æ—Ç–º–µ–Ω–µ–Ω: —Ç–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç");
                }
            }
        }

        orders.addAll(pendingOrders);

        if (!incompleteOrders.isEmpty()) {
            System.out.println("\n=== –ù–ï–ü–û–õ–ù–´–ï –ó–ê–ö–ê–ó–´ –¢–†–ï–ë–£–Æ–¢ –í–ù–ò–ú–ê–ù–ò–Ø ===");
            for (Order order : incompleteOrders) {
                System.out.println("üõí –ó–∞–∫–∞–∑ " + order.getOrderId() +
                        " –∏–º–µ–µ—Ç —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤");
            }
        }
    }

    /**
     * –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É —Ç–æ–≤–∞—Ä–∞
     *
     * –ü—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ:
     * 1. –ò—â–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
     * 2. –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –¥–æ—Å—Ç–∞–≤–∫—É
     *
     * @param product —Ç—Ä–µ–±—É–µ–º—ã–π —Ç–æ–≤–∞—Ä
     * @param requestedAmount –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
     * @return true –µ—Å–ª–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–∞–π–¥–µ–Ω –∏ –¥–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞
     */
    private boolean requestSupply(Product product, int requestedAmount) {
        for (Producer supplier : suppliers) {
            if (supplier.getProduct().equals(product)) {
                supplier.deliverToStorage(this, requestedAmount);
                return true;
            }
        }
        System.out.println("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –î–ª—è —Ç–æ–≤–∞—Ä–∞ '" + product.getName() +
                "' –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤!");
        return false;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–∫–∞–∑
     *
     * 1. –ù–∞—Ö–æ–¥–∏—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∫–ª–∞–¥–æ–≤—â–∏–∫–∞ –¥–ª—è —Å–±–æ—Ä–∫–∏
     * 2. –ü–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –∑–∞–∫–∞–∑ –∫—É—Ä—å–µ—Ä—É
     *
     * @param order –∑–∞–∫–∞–∑ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
     */
    private void processOrder(Order order) {
        // –ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∫–ª–∞–¥–æ–≤—â–∏–∫–∞
        for (Warehouseman keeper : storekeepers) {
            if (keeper.isWorking() && keeper.getCurrentOrder() == null) {
                keeper.setCurrentOrder(order);
                keeper.completeWork();
                break;
            }
        }

        // –ü–æ–∏—Å–∫ –∫—É—Ä—å–µ—Ä–∞ –¥–ª—è —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
        if (order.getStatus() == Order.OrderStatus.PROCESSING) {
            for (Courier courier : couriers) {
                if (courier.isWorking() && courier.getCurrentOrder() == null) {
                    courier.setCurrentOrder(order);
                    courier.completeWork();
                    break;
                }
            }
        }
    }
}